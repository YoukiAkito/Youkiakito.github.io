[{"content":"window.history.go(-1)和window.location.go(-1) 虽然都是回到上一页,但是：\nwindow.history.go(-1)是返回上一页 window.location.go(-1)是刷新上一页\nhistory.back(-1):直接返回当前页的上一页，数据全部消息，是个新页面\nhistory.go(-1):也是返回当前页的上一页，不过表单里的数据全部还在\nhistory.back(1)前进 history.back(-1)后退\n1 2 3 4 5 window.location.reload(); //刷新 window.history.go(1); //前进 window.history.go(-1); //返回+刷新 window.history.forward(); //前进 window.history.back(); //返回 1 2 3 4 5 6 window.location.href = \u0026#34;https://fanyi.youdao.com/index.html#/\u0026#34;; window.history.back(-1); //返回上一页面 //点击id为button的按钮跳转 document.getElementById(\u0026#34;button\u0026#34;).onclick = function () { window.open(\u0026#34;https://fanyi.youdao.com/index.html#/\u0026#34;); }; ","date":"2023-07-20T00:00:00Z","permalink":"https://youkiakito.github.io/p/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/","title":"前端笔记"},{"content":"你一定要好好的，我确实很爱你，但是也没办法放下一切，从九月以后，我从来不想说出口的，也不想承认的爱你。我不知道怎么面对，我告诉所有人这都过去了。现在我只想你好好的，我忘不了，也不想再去伤害任何人，也包括你。\n我不管谁是否值得我托付，但是能做的我都做了，我只希望，未来的我，保护好自己，好好生活，不伤害任何人，快乐的生活，就够了，至于爱情，适合就好。\n我想，以后你是一个快乐的人，即使你把我忘了，也快乐就好，不管是男生还是女生，你都是你。\n其实病态的不止只有你，我也是，我也会不经意间的伤害你，你也一样，所以，我们彼此都在自己的世界里才是最好的。我永远把我爱的人藏在心窝里，你也一样。\n希望你会好，以后有个工作，可以让你妈妈开心一点。回不到起点了，我们最终都是有心理疙瘩的。\n——你听听\n","date":"2022-06-24T00:00:00Z","permalink":"https://youkiakito.github.io/p/%E5%A5%BD%E5%A5%BD%E7%9A%84/","title":"好好的"},{"content":"安装 使用Homebrew安装 macOS 我们可以使用 Homebrew 来安装 Docker。\nHomebrew 的 Cask 已经支持 Docker for Mac，因此可以很方便的使用 Homebrew Cask 来进行安装：\n1 brew install --cask --appdir=/Applications docker 安装完成后，载入Docker app后，点击next，出现询问MAC登陆密码的对话框，输入即可。之后会弹出一个 Docker 运行的提示窗口，状态栏上也有有个小鲸鱼的图标（）。\n手动下载安装 如果需要手动下载，请点击以下链接下载 Install Docker Desktop on Mac\n下载完成后，双击下载的.dmg文件，然后将鲸鱼图标拖拽到Application文件夹即可\n之后点击顶部状态栏中的鲸鱼图标后会弹出操作菜单\n启动终端后，可以通过以下命令查看安装的Docker版本\n1 docker --version ","date":"2021-09-13T00:00:00Z","permalink":"https://youkiakito.github.io/p/mac%E4%B8%8B%E5%AE%89%E8%A3%85docker/","title":"MAC下安装Docker"},{"content":" 由于众所周知的原因，国内拉去Docker镜像十分缓慢，我们可以通过配置国内的镜像加速来解决\n这里我是使用的是科大的镜像地址:https://docker.mirrors.ustc.edu.cn/\n除了科大意外，这里还推荐以下几个镜像地址：\n1 2 网易：https://hub-mirror.c.163.com/ 阿里云：https://\u0026lt;你的ID\u0026gt;.mirror.aliyuncs.com 其中，阿里云镜像地址需要到这里去获取：阿里云镜像获取地址，登陆阿里云账号后，在左侧菜单选中镜像加速器就可以看到你的专属地址了\n当配置某一个加速器地址之后，若发现拉取不到镜像，请切换到另一个加速器地址。国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择对应的镜像加速服务。\n我们可以多添加几个国内的镜像，如果有不能使用的，会切换到可以使用个的镜像来拉取。\nmacOS配置镜像加速 对于mac用户，版本4.0.0(67817)，需要打开Docker Hub界面，然后在设置界面选中Docker Engine\n之后，在\u0026quot;debug\u0026quot;语句后，添加\n1 2 3 4 \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://docker.mirrors.ustc.edu.cn/\u0026#34;, \u0026#34;https://hub-mirror.c.163.com/\u0026#34; ] 然后点击右下角Apply \u0026amp; Restart，镜像加速就配置完毕了。\n注意：在以下语句中\n1 2 3 4 \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://docker.mirrors.ustc.edu.cn/\u0026#34;, \u0026#34;https://hub-mirror.c.163.com/\u0026#34; ] []内需要配置几个镜像加速地址，就按照以上格式写几个\n检查镜像加速是否生效 如果拉取镜像仍然十分缓慢，请手动检查加速器配置是否生效，在命令行执行 docker info，如果从结果中看到了如下内容，说明配置成功\n1 2 3 4 \u0026gt;\u0026gt;\u0026gt; docker info Registry Mirrors: https://reg-mirror.qiniu.com ","date":"2021-09-13T00:00:00Z","permalink":"https://youkiakito.github.io/p/mac%E4%B8%8B%E4%B8%BAdocker%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/","title":"MAC下为Docker配置镜像加速"},{"content":"变量 Python中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。 在Python中，变量就是变量，它没有类型，我们所说的\u0026quot;类型\u0026quot;是变量所指的内存中对象的类型。 等号=用来给变量赋值。 多个变量赋值 Python允许同时为多个变量赋值\n1 2 a = b = c = 1 #为多个对象赋予同一个值 a = b = c = 1，2，\u0026#34;blog\u0026#34; #为多个对象赋予多个变量 标准数据类型 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组） 可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合） Number（数字） Python3 支持 int、float、bool、complex（复数）。\n在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。\n像大多数语言一样，数值类型的赋值和计算都是很直观的。\n内置的 type() 函数可以用来查询变量所指的对象类型。\n1 2 3 4 5 #输入 a, b, c, d = 20, 5.5, True, 4+3j print(type(a), type(b), type(c), type(d)) #输出 \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; \u0026lt;class \u0026#39;complex\u0026#39;\u0026gt; 也可以用 isinstance 来判断：\n1 2 3 a = 111 isinstance(a, int) True isinstance 和 type 的区别在于：\ntype()不会认为子类是一种父类类型。 isinstance()会认为子类是一种父类类型。 认为也可以理解为是否使用继承类型\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class A: ... pass ... \u0026gt;\u0026gt;\u0026gt; class B(A): ... pass ... \u0026gt;\u0026gt;\u0026gt; isinstance(A(), A) True \u0026gt;\u0026gt;\u0026gt; type(A()) == A True \u0026gt;\u0026gt;\u0026gt; isinstance(B(), A) True \u0026gt;\u0026gt;\u0026gt; type(B()) == A False 注意：Python3中，bool是int的子类，True和False可以和数字相加，True==1、False==0会返回True，但可以通过is来判断类型。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 issubclass(bool, int) True True==1 True False==0 True True+1 2 False+1 1 1 is True False 0 is False False 当你指定一个值时，Number 对象就会被创建：\n1 2 var1 = 1 var2 = 10 也可以使用del语句删除一些对象引用。\ndel语句的语法是：del var1[,var2[,var3[....,varN]]]\n可以通过使用del语句删除单个或多个对象。例如：\n1 2 del var del var_a, var_b 数值运算 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026gt;\u0026gt;\u0026gt; 5 + 4 # 加法 9 \u0026gt;\u0026gt;\u0026gt; 4.3 - 2 # 减法 2.3 \u0026gt;\u0026gt;\u0026gt; 3 * 7 # 乘法 21 \u0026gt;\u0026gt;\u0026gt; 2 / 4 # 除法，得到一个浮点数 0.5 \u0026gt;\u0026gt;\u0026gt; 2 // 4 # 除法，得到一个整数 0 \u0026gt;\u0026gt;\u0026gt; 17 % 3 # 取余 2 \u0026gt;\u0026gt;\u0026gt; 2 ** 5 # 乘方 32 注意：在混合计算时，Python会把整型转换成为浮点数。\nString（字符串） Python中的字符串用单引号'或双引号\u0026quot;括起来，同时使用反斜杠\\转义特殊字符。\n字符串的截取的语法格式为：变量[头下标:尾下标]\n以0为开始值，-1为从末尾的开始位置\n加号+是字符串的连接符，星号*表示复制当前字符串，与之结合的数字为复制的次数\n1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 str = \u0026#39;Runoob\u0026#39; print (str) # 输出字符串 print (str[0:-1]) # 输出第一个到倒数第二个的所有字符 print (str[0]) # 输出字符串第一个字符 print (str[2:5]) # 输出从第三个开始到第五个的字符 print (str[2:]) # 输出从第三个开始的后的所有字符 print (str * 2) # 输出字符串两次，也可以写成 print (2 * str) print (str + \u0026#34;TEST\u0026#34;) # 连接字符串 执行后输出\n1 2 3 4 5 6 7 Runoob Runoo R noo noob RunoobRunoob RunoobTEST List（列表） List（列表） 是 Python 中使用最频繁的数据类型。 列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。 列表是写在方括号 [] 之间、用逗号分隔开的元素列表。 和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。 列表截取的语法格式为：变量[头下标:尾下标]\n加号+是列表连接运算符，星号*是重复操作,如下：\n1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 list = [ \u0026#39;abcd\u0026#39;, 786 , 2.23, \u0026#39;runoob\u0026#39;, 70.2 ] tinylist = [123, \u0026#39;runoob\u0026#39;] print (list) # 输出完整列表 print (list[0]) # 输出列表第一个元素 print (list[1:3]) # 从第二个开始输出到第三个元素 print (list[2:]) # 输出从第三个元素开始的所有元素 print (tinylist * 2) # 输出两次列表 print (list + tinylist) # 连接列表 执行后输出：\n1 2 3 4 5 6 [\u0026#39;abcd\u0026#39;, 786, 2.23, \u0026#39;runoob\u0026#39;, 70.2] abcd [786, 2.23] [2.23, \u0026#39;runoob\u0026#39;, 70.2] [123, \u0026#39;runoob\u0026#39;, 123, \u0026#39;runoob\u0026#39;] [\u0026#39;abcd\u0026#39;, 786, 2.23, \u0026#39;runoob\u0026#39;, 70.2, 123, \u0026#39;runoob\u0026#39;] 注意：与字符串不同，列表中的元素是可以改变的\n🌰\n1 2 3 4 5 6 7 8 \u0026gt;\u0026gt;\u0026gt; a = [1, 2, 3, 4, 5, 6] \u0026gt;\u0026gt;\u0026gt; a[0] = 9 \u0026gt;\u0026gt;\u0026gt; a[2:5] = [13, 14, 15] \u0026gt;\u0026gt;\u0026gt; a [9, 2, 13, 14, 15, 6] \u0026gt;\u0026gt;\u0026gt; a[2:5] = [] # 将对应的元素值设置为 [] \u0026gt;\u0026gt;\u0026gt; a [9, 2, 6] 要点：\n","date":"2021-09-11T00:00:00Z","permalink":"https://youkiakito.github.io/p/python3%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"Python3基本数据类型"},{"content":"指定编码 # -*- coding: utf-8 -*-\n标识符 第一个字符需要是字母或下划线_ 其他部分可以是数字、字母或下划线_ 大小写敏感 注意：Python3中可以用中文名作为变量，非ASCII字符也是允许的\n保留字 Python标准库里有一个keyword模块，可以输出当前版本的所有保留字：\n1 2 import keyword keyword.kwlist 注释 单行注释 使用#字符，如：\n1 2 #wdnmd print (\u0026#34;wdnmd\u0026#34;) #这是一个注释 多行注释 使用‘’‘或“”“，用法类似于markdown的代码语法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 #wd #nmd print (\u0026#34;wdnmd\u0026#34;) #这是一个注释 \u0026#39;\u0026#39;\u0026#39; 第一行 第二行 ‘’‘ “”“ 第一行 第二行 ”“” 代码块 Python使用缩进来表示代码块，不需要使用{}。 缩进的空格数可变，但同一个代码块的缩进必须相同，否则会报错\n1 2 3 4 if True: print (\u0026#34;True\u0026#34;) else: print (\u0026#34;False\u0026#34;) 1 2 3 4 5 6 if True: print (\u0026#34;Answer\u0026#34;) print (\u0026#34;True\u0026#34;) else: print (\u0026#34;Answer\u0026#34;) print (\u0026#34;False\u0026#34;) 语句 多行语句 通常是一行写完一条语句，但是如果语句很长，可以使用反斜杠\\来实现多行语句\n1 2 3 total = item_one + \\ item_two + \\ item_three 如果多行语句位于[]``{}``()中，不需要使用\\，如：\n1 2 total = [\u0026#39;item_one\u0026#39;, \u0026#39;item_two\u0026#39;, \u0026#39;item_three\u0026#39;, \u0026#39;item_four\u0026#39;, \u0026#39;item_five\u0026#39;] 单行多条语句 在同一行中使用多条语句，语句之间使用分号;分割，如：\n1 import sys; x = \u0026#39;runoob\u0026#39;; sys.stdout.write(x + \u0026#39;\\n\u0026#39;) 这里按标准写法应该为：\n1 2 3 import sys x = \u0026#39;runoob\u0026#39; sys.stdout.write(x + \u0026#39;\\n\u0026#39;) Number类型 int(整型)：如1，表示为长整型\nbool(布尔)：如True、False\nfloat(浮点)：如1.23、3E-2\ncomplex(复数)：如1 + 2j、1.1 + 2.2j\nString类型 Python中的单引号'和双引号\u0026quot;使用完全相同 转义符\\ 反斜杠可以用来转义，使用r可以让反斜杠不发生转义。如r\u0026quot;this is a line with \\n\u0026quot;则\\n会显示，并不是换行。 按字面意义级联字符串，如\u0026quot;this \u0026quot; \u0026ldquo;is \u0026quot; \u0026ldquo;string\u0026quot;会被自动转换为this is string。 字符串可以用+运算符连接在一起，用*运算符重复。 Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。 Python中的字符串不能改变。 Python没有单独的字符类型，一个字符就是长度为 1 的字符串。 字符串的截取的语法格式如下：变量[头下标:尾下标:步长] 1 2 3 4 word = \u0026#39;字符串\u0026#39; sentence = \u0026#34;这是一个句子。\u0026#34; paragraph = \u0026#34;\u0026#34;\u0026#34;这是一个段落， 可以由多行组成\u0026#34;\u0026#34;\u0026#34; 举个🌰\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 str=\u0026#39;123456789\u0026#39; print(str) # 输出字符串 print(str[0:-1]) # 输出第一个到倒数第二个的所有字符 print(str[0]) # 输出字符串第一个字符 print(str[2:5]) # 输出从第三个开始到第五个的字符 print(str[2:]) # 输出从第三个开始后的所有字符 print(str[1:5:2]) # 输出从第二个开始到第五个且每隔一个的字符（步长为2） print(str * 2) # 输出字符串两次 print(str + \u0026#39;你好\u0026#39;) # 连接字符串 print(\u0026#39;------------------------------\u0026#39;) print(\u0026#39;hello\\nrunoob\u0026#39;) # 使用反斜杠(\\)+n转义特殊字符 print(r\u0026#39;hello\\nrunoob\u0026#39;) # 在字符串前面添加一个 r，表示原始字符串，不会发生转义 输出结果为\n1 2 3 4 5 6 7 8 9 10 11 12 123456789 12345678 1 345 3456789 24 123456789123456789 123456789你好 ------------------------------ hello runoob hello\\nrunoob 空行 函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。\n空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。\n记住：空行也是程序代码的一部分。\n等待用户输入 执行以下程序会在按enter键后等待用户输入：\n1 2 3 #!/usr/bin/python3 input(\u0026#34;\\n\\n按下 enter 键后退出。\u0026#34;) \u0026ldquo;\\n\\n\u0026quot;在结果输出前会输出两个新的空行。一旦用户再次按下 enter 键时，程序将退出。\nprint输出 print默认是换行输出的，如不需要换行需要在变量末尾加上end=“ ”\n执行程序：\n1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 x=\u0026#34;a\u0026#34; y=\u0026#34;b\u0026#34; # 换行输出 print( x ) print( y ) print(\u0026#39;---------\u0026#39;) # 不换行输出 print( x, end=\u0026#34; \u0026#34; ) print( y, end=\u0026#34; \u0026#34; ) print() 输出：\n1 2 3 4 a b --------- a b 导入模块 使用import或者from...import来导入相应模块\nimport用于导入整个模块，如：import somemodule\nfrom...import用于倒入模块中的部分函数，如：\n1 2 3 from somemodule import somefunction #导入单个函数 from somemodule import somefunction1，somefunction2 #导入多个函数 from somemodule import * #导入全部函数 来个程序🌰看看：\n这是导入sys模块，引用argv和path时需要在前面加sys.\n1 2 3 4 5 6 import sys print(\u0026#39;================Python import mode==========================\u0026#39;) print (\u0026#39;命令行参数为:\u0026#39;) for i in sys.argv: print (i) print (\u0026#39;\\n python 路径为\u0026#39;,sys.path) 这是导入sys模块中的argv和path，所以不需要在前面加sys.\n1 2 3 4 from sys import argv,path # 导入特定的成员 print(\u0026#39;================python from import===================================\u0026#39;) print(\u0026#39;path:\u0026#39;,path) 命令行参数 Python可以使用-h参数查看各参数帮助信息，在终端中执行python -h即可\n","date":"2021-09-11T00:00:00Z","permalink":"https://youkiakito.github.io/p/python3%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","title":"Python3基本语法"},{"content":" 关于Anaconda：Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。因为包含了大量的科学包，Anaconda 的下载文件比较大（约 531 MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用Miniconda这个较小的发行版（仅包含conda和 Python）。\n安装Anaconda 1.下载Anaconda 这里使用清华大学的源会快一些\nhttps://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M\u0026O=D\n进去之后根据需要的架构选择安装包，然后复制下载链接，在云服务器中进行下载\nyum install -y wget \u0026amp;\u0026amp; wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.05-Linux-x86_64.sh\n2.安装Anaconda 在下载目录中执行下载的文件，这里记得使用命令ls查看所下载文件的名字，然后执行\nbash Anaconda3-2021.05-Linux-x86_64.sh\n之后会有很长的License许可声明，一直回车直到出现以下文字\n1 2 3 4 Do you accept the license terms? [yes|no] [no] \u0026gt;\u0026gt;\u0026gt; Please answer \u0026#39;yes\u0026#39; or \u0026#39;no\u0026#39;: \u0026gt;\u0026gt;\u0026gt; yes 之后要选择安装目录，如果无需更改直接回车Enter，如需更改要输入绝对路径（可以先查看下硬盘的挂载情况再自行选择安装目录，查看挂载情况的语句是df -h）:\n1 2 3 4 5 6 7 8 Anaconda3 will now be installed into this location: /root/anaconda3 - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below [/root/anaconda3] \u0026gt;\u0026gt;\u0026gt; 之后问是否需要进行conda的初始化，我选择yes，是在/root/.bashrc目录中自动添加环境变量，会使得开机自动启动base环境。（这里应该是新版安装包的改动之处，老版本的安装包都是问是否需要添加conda至环境变量，且默认直接回车Enter是不添加，若未添加后续需要手动添加。）不过我选了yes之后使用conda activate显示如下\n-bash: conda: command not foun\n这个应该是环境变量的锅，所以还要配置下，之后会说\n看到如下提示则安装成功：\n1 2 3 4 5 6 7 8 9 Thank you for installing Anaconda3! =========================================================================== Anaconda and JetBrains are working together to bring you Anaconda-powered environments tightly integrated in the PyCharm IDE. PyCharm for Anaconda is available at: https://www.anaconda.com/pycharm 然后手动配置下环境变量\nvi /etc/profile\n在文件最后加入如下语句（路径需要根据自己的安装位置更改）：\n1 2 PATH=$PATH:/root/anaconda3/bin export PATH 按住shift键+:键，输入wq，保存文件并退出。最后使用如下命令刷新环境变量即可(不刷新可能无法生效)\n1 2 source /etc/profile echo $PATH 最后就可以使用Anaconda的环境了\n1 2 conda activate # 进入conda环境 出现(base)则说明安装成功 conda deactivate # 退出conda环境 ","date":"2021-09-01T00:00:00Z","permalink":"https://youkiakito.github.io/p/%E5%AE%89%E8%A3%85anaconda/","title":"安装Anaconda"},{"content":"部署训练好的ChatterBot机器人到云服务器 1.安装ChatterBot 首先，进入Anaconda环境\n1 2 conda activate # 进入conda环境 出现(base)则说明安装成功 conda deactivate # 退出conda环境 然后安装ChatterBot\n1 2 pip3 install chatterbot pip3 install chatterbot-corpus 这样我们部署服务的前置条件就准备好了\n2.部署成服务 先写个python文件，名字随意\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from chatterbot import ChatBot bot = ChatBot( \u0026#39;susu\u0026#39;, database_uri=\u0026#39;sqlite:///db.sqlite3\u0026#39; ) print(\u0026#39;Type something to begin...\u0026#39;) while True: try: user_input = input() bot_response = bot.get_response(user_input) print(bot_response) # Press ctrl-c or ctrl-d on the keyboard to exit except (KeyboardInterrupt, EOFError, SystemExit): break 然后把训练完的db.sqlite3文件上传到云服务器，之后在Anaconda环境下运行刚才写好的python文件\n1 python3 test.py 等待完成后显示Type something to begin...后就可以开始对话了\n注意：一问一答哦\n","date":"2021-09-01T00:00:00Z","permalink":"https://youkiakito.github.io/p/%E4%BD%BF%E7%94%A8anaconda%E9%83%A8%E7%BD%B2chatterbot%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"使用Anaconda部署ChatterBot到云服务器"},{"content":"基于ChatterBot的聊天机器人 前言：因为作者太无聊了所以想做个自动问答系统来消遣时间才不是没朋友，也就是常说的聊天机器人\n关键点 句意理解\n系统接收到一句话，需要先通过语法分析，语义分析等来理解该句子，这样才能更好的给出回答。 文本信息摘取\n系统需要有自己的语料库、知识库或者相关内容，并从中抽取出相应的回答。 知识推理\n这个是更高一层的要求，系统应该可以通过上下文，或者接收到的句子的语义，通过知识推理的手段获取到知识库中不存在的答案。 可用技术栈 基于以上几点，可用基于现有的一些算法来训练自己的模型，也可用通过开源的框架来搭建。这里我采用的是基于开源框架ChatterBot来实现的方法\n基于ChatterBot实现 ChatterBot 是一个功能强大的，基于 Python 的聊天机器人框架\n其 GitHub 地址为：https://github.com/gunthercox/ChatterBot/tree/master\n官方文档为：https://chatterbot.readthedocs.io\n实战 1.获取语料 中文聊天语料这一块，我选择了网上大神整理的资料，这里附上github链接：\nhttps://github.com/codemayq/chinese_chatbot_corpus\n其中语料的使用大神有写了详尽的文档，务必仔细阅读后使用。\n这里笔者遇到了一个比较奇怪的问题，使用pycharm运行文档里的main.py可以顺利进行语料转换，然而直接使用命令行会报错，暂时不清楚原理\n2.使用Google Colab训练 上传语料到Colab 这里我采用的是将下载到的语料上传到Google Drive，然后挂载Google Drive硬盘到Colab来调用\n在Colab上安装ChatterBot 1 2 !pip3 install chatterbot #注意：感叹号是必须的 !pip3 install chatterbot-corpus #注意：感叹号是必须的 创建一个ChatBot 1 2 3 4 from chatterbot import ChatBot from chatterbot.trainers import ListTrainer chatbot = ChatBot(\u0026#34;susu\u0026#34;) trainer = ListTrainer(chatbot) 载入语料 1 2 3 with open(\u0026#39;chatterbot.tsv\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: data = f.read().replace(\u0026#39;\\t\u0026#39;, \u0026#39;\\n\u0026#39;) print(data[:100]) 开始训练 1 trainer.train(data) 这一步根据语料的数据量大小时间有长有短，个人测试为了不超过Colab的使用限制，尽量选择较小的语料库或者拆分为多个语料库多次训练比较好\n等待训练完成后，记得将生成的db.sqlite3文件下载到本地\n","date":"2021-08-28T00:00:00Z","permalink":"https://youkiakito.github.io/p/chatterbot%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/","title":"ChatterBot聊天机器人"},{"content":" 关机/重启/注销 常⽤命令shutdown -h now 作⽤即刻关机 shutdown -h 10 10分钟后关机 shutdown -h 11:00 11：00关机 shutdown -h +10 预定时间关机（10分钟后） shutdown -c 取消指定时间关机 shutdown -r now 重启 shutdown -r 10 10分钟之后重启 shutdown -r 11:00 定时重启 reboot 重启 init 6 重启 init 0 ⽴刻关机 telinit 0 关机 poweroff ⽴刻关机 halt 关机 sync buff数据同步到磁盘 logout 退出登录Shell 系统信息和性能查看 常⽤命令作⽤\nuname -a 查看内核/OS/CPU信息 uname -r 查看内核版本 uname -m 查看处理器架构 arch 查看处理器架构 hostname 查看计算机名 who 显示当前登录系统的⽤户 who am i 显示登录时的⽤户名 whoami 显示当前⽤户名 cat /proc/version 查看linux版本信息 cat /proc/cpuinfo 查看CPU信息 cat /proc/interrupts 查看中断 cat /proc/loadavg 查看系统负载 uptime 查看系统运⾏时间、⽤户数、负载 env 查看系统的环境变量 lsusb -tv 查看系统USB设备信息 lspci -tv 查看系统PCI设备信息 lsmod 查看已加载的系统模块 grep MemTotal /proc/meminfo 查看内存总量 grep MemFree /proc/meminfo 查看空闲内存量 free -m 查看内存⽤量和交换区⽤量 date 显示系统⽇期时间 cal 2021 显示2021⽇历表 top 动态显示cpu/内存/进程等情况 vmstat 1 20 每1秒采⼀次系统状态，采20次 iostat 查看io读写/cpu使⽤情况 sar -u 1 10 查询cpu使⽤情况（1秒⼀次，共10次） sar -d 1 10 查询磁盘性能 磁盘和分区 常⽤命令\nfdisk -l swapon -s df -h\ndf -hl\ndu -sh /dir\n作⽤\n查看所有磁盘分区查看所有交换分区\n查看磁盘使⽤情况及挂载点同上\n查看指定某个⽬录的⼤⼩\n从⾼到低依次显示⽂件和⽬录⼤⼩\nmount /dev/hda2 /mnt/hda2\nmount-tntfs/dev/sdc1/mnt/usbhd1 mount -o loop xxx.iso /mnt/cdrom mount /dev/sda1 /mnt/usbdisk umount -v/dev/sda1\numount -v /mnt/mymnt fuser -km /mnt/hda1\n挂载hda2盘\n指定⽂件系统类型挂载（如ntfs）挂载iso⽂件\n挂载usb盘/闪存设备通过设备名卸载 通过挂载点卸载 强制卸载(慎⽤)\n⽤户和⽤户组 常⽤命令useradd codesheep 作⽤创建⽤户 userdel -r codesheep 删除⽤户 usermod -g group_name user_name 修改⽤户的组 usermod -aG group_name user_name 将⽤户添加到组 usermod -s /bin/ksh -d /home/codepig–g dev codesheep 修改⽤户codesheep的登录Shell、主⽬录以及⽤户组 groups test 查看test⽤户所在的组 groupadd group_name 创建⽤户组 groupdel group_name 删除⽤户组 groupmod -n new_name old_name 重命名⽤户组 su - user_name 完整切换到⼀个⽤户环境 passwd 修改⼝令 passwd codesheep 修改某⽤户的⼝令 w 查看活动⽤户 id codesheep 查看指定⽤户codesheep信息 last 查看⽤户登录⽇志 crontab -l 查看当前⽤户的计划任务 cut -d: -f1 /etc/passwd 查看系统所有⽤户 cut -d: -f1 /etc/group 查看系统所有组 ⽹络和进程管理 常⽤命令ifconfig 作⽤查看⽹络接⼝属性 ifconfig eth0 查看某⽹卡的配置 route -n 查看路由表 netstat -lntp 查看所有监听端⼝ netstat -antp 查看已经建⽴的TCP连接 netstat -lutp 查看TCP/UDP的状态信息 ifup eth0 启⽤eth0⽹络设备 ifdown eth0 禁⽤eth0⽹络设备 iptables -L 查看iptables规则 ifconfig eth0 192.168.1.1netmask255.255.255.0 配置ip地址 dhclient eth0 以dhcp模式启⽤eth0 route add -net 0/0 gw Gateway_IP 配置默认⽹关 routeadd-net192.168.0.0netmask 255.255.0.0 gw192.168.1.1 配置静态路由到达⽹络'192.168.0.0/16' route del 0/0 gw Gateway_IP 删除静态路由 hostname 查看主机名 hostwww.codesheep.cnnslookupwww.codesheep.cn\nps -ef\n解析主机名\n查询DNS记录，查看域名解析是否正常\n查看所有进程\n过滤出你需要的进程\nkill -s name kill -s pid top\nvmstat 1 20\niostat\nsar -u 110\nsar -d 110\nkill指定名称的进程\nkill指定pid的进程实时显示进程状态\n每1秒采⼀次系统状态，采\n20次\n查看io读写/cpu使⽤情况\n查询cpu使⽤情况（1秒⼀次，共10次）\n查询磁盘性能\n常⻅系统服务命令 常⽤命令chkconfig \u0026ndash;list 作⽤列出系统服务 service \u0026amp;lt;服务名\u0026amp;gt; status 查看某个服务 service \u0026amp;lt;服务名\u0026amp;gt; start 启动某个服务 service \u0026amp;lt;服务名\u0026amp;gt; stop 终⽌某个服务 service \u0026amp;lt;服务名\u0026amp;gt; restart 重启某个服务 systemctl status \u0026amp;lt;服务名\u0026amp;gt; 查看某个服务 systemctl start \u0026amp;lt;服务名\u0026amp;gt; 启动某个服务 systemctl stop \u0026amp;lt;服务名\u0026amp;gt; 终⽌某个服务 systemctl restart \u0026amp;lt;服务名\u0026amp;gt; 重启某个服务 systemctl enable \u0026amp;lt;服务名\u0026amp;gt; 开启⾃启动 systemctl disable \u0026amp;lt;服务名\u0026amp;gt; 关闭⾃启动 ⽂件和⽬录操作 常⽤命令cd \u0026amp;lt;⽬录名\u0026amp;gt; 作⽤进⼊某个⽬录 cd .. 回上级⽬录 cd ../.. 回上两级⽬录 cd 进个⼈主⽬录 cd - 回上⼀步所在⽬录 pwd 显示当前路径 ls 查看⽂件⽬录列表 ls -F 查看⽬录中内容（显示是⽂件还是⽬录） ls -l 查看⽂件和⽬录的详情列表 ls -a 查看隐藏⽂件 ls -lh 查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性） ls -lSr 查看⽂件和⽬录列表（以⽂件⼤⼩升序查看） tree 查看⽂件和⽬录的树形结构 mkdir \u0026amp;lt;⽬录名\u0026amp;gt; 创建⽬录 mkdir dir1 dir2 同时创建两个⽬录 mkdir -p/tmp/dir1/dir2 创建⽬录树 rm -f file1 删除'file1'⽂件 rmdir dir1 删除'dir1'⽬录 rm -rf dir1 删除'dir1'⽬录和其内容 rm -rf dir1 dir2 同时删除两个⽬录及其内容 mv old_dir new_dir 重命名/移动⽬录 cp file1 file2 复制⽂件 cp dir/* . 复制某⽬录下的所有⽂件⾄当前⽬录 cp -a dir1 dir2 复制⽬录 cp -a /tmp/dir1 . 复制⼀个⽬录⾄当前⽬录 ln -s file1 link1 创建指向⽂件/⽬录的软链接 ln file1 lnk1 创建指向⽂件/⽬录的物理链接 find / -name file1 从跟⽬录开始搜索⽂件/⽬录 find / -user user1 搜索⽤户user1的⽂件/⽬录 find /dir -name *.bin 在⽬录/dir中搜带有.bin后缀的⽂件 locate \u0026amp;lt;关键词\u0026amp;gt; 快速定位⽂件 locate *.mp4 寻找.mp4结尾的⽂件 whereis \u0026amp;lt;关键词\u0026amp;gt; 显示某⼆进制⽂件/可执⾏⽂件的路径 which \u0026amp;lt;关键词\u0026amp;gt; 查找系统⽬录下某的⼆进制⽂件 chmod ugo+rwx dir1 设置⽬录所有者(u)、群组(g)及其他⼈(o)的读（r）写(w)执⾏(x)权限 chmod go-rwx dir1 移除群组(g)与其他⼈(o)对⽬录的读写执⾏权限 chown user1 file1 改变⽂件的所有者属性 chown -R user1 dir1 改变⽬录的所有者属性 chgrp group1 file1 改变⽂件群组 ⽂件查看和处理 常⽤命令cat file1 作⽤查看⽂件内容 cat -n file1 查看内容并标示⾏数 cat xxx.txt awk 'NR%2==1' tac file1 从最后⼀⾏开始反看⽂件内容 more file1 查看⼀个⻓⽂件的内容 less file1 类似more命令，但允许反向操作 head -2 file1 查看⽂件前两⾏ tail -2 file1 查看⽂件后两⾏ tail -f /log/msg 实时查看添加到⽂件中的内容 grep codesheep hello.txt 在⽂件hello.txt中查找关键词codesheep grep ^sheep hello.txt 在⽂件hello.txt中查找以sheep开头的内容 grep [0-9] hello.txt 选择hello.txt⽂件中所有包含数字的⾏ sed 's/s1/s2/g' hello.txt 将hello.txt⽂件中的s1替换成s2 sed '/^$/d' hello.txt 从hello.txt⽂件中删除所有空⽩⾏ sed '/ *#/d; /^$/d' hello.txt 从hello.txt⽂件中删除所有注释和空⽩⾏ sed -e '1d' hello.txt 从⽂件hello.txt中排除第⼀⾏ sed -n '/s1/p' hello.txt 查看只包含关键词\u0026quot;s1\u0026quot;的⾏ sed -e 's/ *$//' hello.txt 删除每⼀⾏最后的空⽩字符 sed -e 's/s1//g' hello.txt 从⽂档中只删除词汇s1并保留剩余全部 sed -n '1,5p;5q' hello.txt 查看从第⼀⾏到第5⾏内容 sed -n '5p;5q' hello.txt 查看第5⾏ paste file1 file2 合并两个⽂件或两栏的内容 paste -d '+' file1 file2 合并两个⽂件或两栏的内容，中间⽤\u0026quot;+\u0026quot;区分 sort file1 file2 排序两个⽂件的内容 sort file1 file2 uniq sort file1 file2 uniq -u sort file1 file2 uniq -d comm -1 file1 file2 ⽐较两个⽂件的内容(去除'file1'所含内容) comm -2 file1 file2 ⽐较两个⽂件的内容(去除'file2'所含内容) comm -3 file1 file2 ⽐较两个⽂件的内容(去除两⽂件共有部分) 打包和解压 常⽤命令zip xxx.zip file 作⽤压缩⾄zip包 zip -r xxx.zip file1 file2 dir1 将多个⽂件+⽬录压成zip包 unzip xxx.zip 解压zip包 tar -cvf xxx.tar file 创建⾮压缩tar包 tar -cvf xxx.tar file1 file2 dir1 将多个⽂件+⽬录打tar包 tar -tf xxx.tar 查看tar包的内容 tar -xvf xxx.tar 解压tar包 tar -xvf xxx.tar -C /dir 将tar包解压⾄指定⽬录 tar -cvfj xxx.tar.bz2 dir 创建bz2压缩包 tar -jxvf xxx.tar.bz2 解压bz2压缩包 tar -cvfz xxx.tar.gz dir 创建gzip压缩包 tar -zxvf xxx.tar.gz 解压gzip压缩包 bunzip2 xxx.bz2 解压bz2压缩包 bzip2 filename 压缩⽂件 gunzip xxx.gz 解压gzip压缩包 gzip filename 压缩⽂件 gzip -9 filename 最⼤程度压缩 RPM 包管理命令 常⽤命令rpm -qa 作⽤查看已安装的rpm包 rpm -q pkg_name 查询某个rpm包 rpm -q \u0026ndash;whatprovides xxx 显示xxx功能是由哪个包提供的 rpm -q \u0026ndash;whatrequires xxx 显示xxx功能被哪个程序包依赖的 rpm -q \u0026ndash;changelog xxx 显示xxx包的更改记录 rpm -qi pkg_name 查看⼀个包的详细信息 rpm -qd pkg_name 查询⼀个包所提供的⽂档 rpm -qc pkg_name 查看已安装rpm包提供的配置⽂件 rpm -ql pkg_name 查看⼀个包安装了哪些⽂件 rpm -qf filename 查看某个⽂件属于哪个包 rpm -qR pkg_name 查询包的依赖关系 rpm -ivh xxx.rpm 安装rpm包 rpm -ivh \u0026ndash;test xxx.rpm 测试安装rpm包 rpm -ivh \u0026ndash;nodeps xxx.rpm 安装rpm包时忽略依赖关系 rpm -e xxx 卸载程序包 rpm -Fvh pkg_name 升级确定已安装的rpm包 rpm -Uvh pkg_name 升级rpm包(若未安装则会安装) rpm -V pkg_name RPM包详细信息校验 YUM 包管理命令 常⽤命令yum repolist enabled 作⽤显示可⽤的源仓库 yum search pkg_name 搜索软件包 yum install pkg_name 下载并安装软件包 yum install \u0026ndash;downloadonly pkg_name 只下载不安装 yum list 显示所有程序包 yum list installed 查看当前系统已安装包 yum list updates 查看可以更新的包列表 yum check-update 查看可升级的软件包 yum update 更新所有软件包 yum update pkg_name 升级指定软件包 yum deplist pkg_name 列出软件包依赖关系 yum remove pkg_name 删除软件包 yum clean all 清除缓存 yum clean packages 清除缓存的软件包 yum clean headers 清除缓存的header DPKG 包管理命令 常⽤命令dpkg -c xxx.deb 作⽤列出deb包的内容 dpkg -i xxx.deb 安装/更新deb包 dpkg -r pkg_name 移除deb包 dpkg -P pkg_name 移除deb包(不保留配置) dpkg -l 查看系统中已安装deb包 dpkg -l pkg_name 显示包的⼤致信息 dpkg -L pkg_name 查看deb包安装的⽂件 dpkg -s pkg_name 查看包的详细信息 dpkg –unpack xxx.deb 解开deb包的内容 APT 软件⼯具 常⽤命令apt-cache search pkg_name 作⽤搜索程序包 apt-cache show pkg_name 获取包的概览信息 apt-get install pkg_name 安装/升级软件包 apt-get purge pkg_name 卸载软件（包括配置） apt-get remove pkg_name 卸载软件（不包括配置） apt-get update 更新包索引信息 apt-get upgrade 更新已安装软件包 apt-get clean 清理缓存 ","date":"2021-08-28T00:00:00Z","permalink":"https://youkiakito.github.io/p/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"Linux常用命令"},{"content":" 前言：因为作者记忆力实在是差的离谱，故作此笔记以记录markdown的常用语法格式，以便需要时查找使用。如果这也能帮助到你，那真的再好不过了。具体内容包括代码、列表、链接、图片、区块等的markdown语法使用，部分内容需要查看markdown源码才能看出差别\nmarkdown学习笔记 代码 mac上指定代码使用字符·的英文字符即可(键盘上数字1的左边)，如：print().\n而代码区块使用四个空格或者制表符即可，如：\n也可以用三个字符·的英文字符包裹一段代码，并指定一种语言（可不指定），如：\n1 2 3 4 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt; 列表 无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：\n第一项 第二项 第三项 第一项 第二项 第三项 第一项 第二项 第三项 有序列表使用数字并加上.号来表示，如：\n第一项 第二项 第三项 列表嵌套 列表嵌套只需在子列表中的选项前面添加四个空格即可：\n第一项 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项 第二项嵌套的第一个元素 第二项嵌套的第二个元素 区块 Markdown 区块引用是在段落开头使用 \u0026gt; 符号 ，然后后面紧跟一个空格符号：\n区块引用\n一层嵌套\n二层嵌套\n如果要在列表项目内放进区块，那么就需要在 \u0026gt; 前添加四个空格的缩进：\n第一项 第一项区块第一排\n第一项区块第二排\n第二项 第二项区块第一排\n第二项区块第二排\n链接 链接实用方法如下：\n1 2 3 [链接名称](链接地址) 或者 \u0026lt;链接地址\u0026gt; 举个栗子：\n这是一个链接 GAYHUB\n或者直接使用：\nhttps://www.github.com\n图片 图片语法格式如下：\n1 2 ![alt属性文本](图片地址) ![alt属性文本](图片地址 \u0026#34;可选标题\u0026#34;) 例如：\n无标题\n有标题\n表格 制作表格使用｜来分隔不同单元格，用-分隔表格和其它行，如：\n1 2 3 4 | 表头 | 表头 | | ---- | ---- | | 单元格 | 单元格 | | 单元格 | 单元格 | 显示为\n表头 表头 单元格 单元格 单元格 单元格 对齐方式 可以用以下方法设置对齐方式：\n-:：设置内容和标题居右对齐\n:-：设置内容和标题居左对齐\n:-:：设置内容和标题居中对齐\n实例如下：\n1 2 3 4 | 左对齐 | 右对齐 | 居中对齐 | | :---- | ----: | :----: | | 单元格 | 单元格 | 单元格 | | 单元格 | 单元格 | 单元格 | 左对齐 右对齐 居中对齐 单元格 单元格 单元格 单元格 单元格 单元格 ","date":"2021-08-27T00:00:00Z","permalink":"https://youkiakito.github.io/p/markdown%E5%AD%A6%E4%B9%A0/","title":"markdown学习"},{"content":"Welcome to Hugo theme Stack. This is your first post. Edit or delete it, then start writing!\nFor more information about this theme, check the documentation: https://docs.stack.jimmycai.com/\nWant a site like this? Check out hugo-theme-stack-stater\nPhoto by Pawel Czerwinski on Unsplash\n","date":"2020-03-06T00:00:00Z","image":"https://youkiakito.github.io/p/hello-world/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkiakito.github.io/p/hello-world/","title":"Hello World"}]